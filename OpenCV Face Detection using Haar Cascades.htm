<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0069)https://docs.opencv.org/master/d7/d8b/tutorial_py_face_detection.html -->
<!-- HTML header for doxygen 1.8.6--><HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=9.0000" 
http-equiv="X-UA-Compatible">
 
<META http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"> 
<META http-equiv="X-UA-Compatible" content="IE=9"> 
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"> <TITLE>OpenCV: Face 
Detection using Haar Cascades</TITLE> <LINK href="../../opencv.ico" rel="shortcut icon" 
type="image/x-icon"> <LINK href="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/tabs.css" 
rel="stylesheet" type="text/css"> 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/jquery.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/dynsections.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/tutorial-utils.js" type="text/javascript"></SCRIPT>
 <LINK href="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/search.css" 
rel="stylesheet" type="text/css"> 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/searchdata.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/search.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
//<![CDATA[
MathJax.Hub.Config(
{
  TeX: {
      Macros: {
          matTT: [ "\\[ \\left|\\begin{array}{ccc} #1 & #2 & #3\\\\ #4 & #5 & #6\\\\ #7 & #8 & #9 \\end{array}\\right| \\]", 9],
          fork: ["\\left\\{ \\begin{array}{l l} #1 & \\mbox{#2}\\\\ #3 & \\mbox{#4}\\\\ \\end{array} \\right.", 4],
          forkthree: ["\\left\\{ \\begin{array}{l l} #1 & \\mbox{#2}\\\\ #3 & \\mbox{#4}\\\\ #5 & \\mbox{#6}\\\\ \\end{array} \\right.", 6],
          forkfour: ["\\left\\{ \\begin{array}{l l} #1 & \\mbox{#2}\\\\ #3 & \\mbox{#4}\\\\ #5 & \\mbox{#6}\\\\ #7 & \\mbox{#8}\\\\ \\end{array} \\right.", 8],
          vecthree: ["\\begin{bmatrix} #1\\\\ #2\\\\ #3 \\end{bmatrix}", 3],
          vecthreethree: ["\\begin{bmatrix} #1 & #2 & #3\\\\ #4 & #5 & #6\\\\ #7 & #8 & #9 \\end{bmatrix}", 9],
          hdotsfor: ["\\dots", 1],
          mathbbm: ["\\mathbb{#1}", 1],
          bordermatrix: ["\\matrix{#1}", 1]
      }
  }
}
);
//]]>
</SCRIPT>

<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/MathJax.js" type="text/javascript"></SCRIPT>
 <LINK href="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/doxygen.css" 
rel="stylesheet" type="text/css"> <LINK href="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/stylesheet.css" 
rel="stylesheet" type="text/css"> </HEAD>
<BODY> 
<DIV id="top"><!-- do not remove this div, it is closed by doxygen! --> 
<DIV id="titlearea">
<SCRIPT>
  (function() {
    var cx = '002541620211387084530:kaexgxg7oxu';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</SCRIPT>
 <gcse:search></gcse:search> 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/version.js" type="text/javascript"></SCRIPT>
 
<TABLE cellSpacing="0" cellPadding="0">
  <TBODY>
  <TR style="height: 56px;">
    <TD id="projectlogo"><IMG alt="Logo" src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/opencv-logo-small.png"></TD>
    <TD style="padding-left: 0.5em;">
      <DIV id="projectname">OpenCV   &nbsp; <SPAN 
      id="projectnumber">4.0.1-dev</SPAN>    </DIV>
      <DIV id="projectbrief">Open Source Computer 
Vision</DIV></TD></TR></TBODY></TABLE></DIV><!-- end header part --> <!-- Generated by Doxygen 1.8.12 --> 
<SCRIPT type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</SCRIPT>
 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/menudata.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/menu.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</SCRIPT>
 
<DIV id="main-nav"></DIV><!-- window showing the filter options --> 
<DIV id="MSearchSelectWindow" onmouseover="return searchBox.OnSearchSelectShow()" 
onmouseout="return searchBox.OnSearchSelectHide()" onkeydown="return searchBox.OnSearchSelectKey(event)"></DIV><!-- iframe showing the search results (closed by default) --> 
<DIV id="MSearchResultsWindow"><IFRAME name="MSearchResults" id="MSearchResults" 
src="res://ieframe.dll/dnserrordiagoff.htm" frameBorder="0"></IFRAME> </DIV>
<DIV class="navpath" id="nav-path">
<UL>
  <LI class="navelem"><A class="el" href="https://docs.opencv.org/master/d6/d00/tutorial_py_root.html">OpenCV-Python 
  Tutorials</A></LI>
  <LI class="navelem"><A class="el" href="https://docs.opencv.org/master/d9/de5/tutorial_py_table_of_contents_objdetect.html">Object 
  Detection</A></LI></UL></DIV></DIV><!-- top --> 
<DIV class="header">
<DIV class="headertitle">
<DIV class="title">Face Detection using Haar Cascades </DIV></DIV></DIV><!--header--> 
<DIV class="contents">
<DIV class="textblock">
<H2>Goal </H2>
<P>In this session,</P>
<UL>
  <LI>We will see the basics of face detection using Haar Feature-based Cascade 
  Classifiers</LI>
  <LI>We will extend the same for eye detection etc.</LI></UL>
<H2>Basics </H2>
<P>Object Detection using Haar feature-based cascade classifiers is an effective 
object detection method proposed by Paul Viola and Michael Jones in their paper, 
"Rapid Object Detection using a Boosted Cascade of Simple Features" in 2001. It 
is a machine learning based approach where a cascade function is trained from a 
lot of positive and negative images. It is then used to detect objects in other 
images.</P>
<P>Here we will work with face detection. Initially, the algorithm needs a lot 
of positive images (images of faces) and negative images (images without faces) 
to train the classifier. Then we need to extract features from it. For this, 
Haar features shown in the below image are used. They are just like our 
convolutional kernel. Each feature is a single value obtained by subtracting sum 
of pixels under the white rectangle from sum of pixels under the black 
rectangle.</P>
<DIV class="image"><IMG alt="haar_features.jpg" src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/haar_features.jpg"> 
<DIV class="caption">image</DIV></DIV>
<P> Now, all possible sizes and locations of each kernel are used to calculate 
lots of features. (Just imagine how much computation it needs? Even a 24x24 
window results over 160000 features). For each feature calculation, we need to 
find the sum of the pixels under white and black rectangles. To solve this, they 
introduced the integral image. However large your image, it reduces the 
calculations for a given pixel to an operation involving just four pixels. Nice, 
isn't it? It makes things super-fast.</P>
<P>But among all these features we calculated, most of them are irrelevant. For 
example, consider the image below. The top row shows two good features. The 
first feature selected seems to focus on the property that the region of the 
eyes is often darker than the region of the nose and cheeks. The second feature 
selected relies on the property that the eyes are darker than the bridge of the 
nose. But the same windows applied to cheeks or any other place is irrelevant. 
So how do we select the best features out of 160000+ features? It is achieved by 
<B>Adaboost</B>.</P>
<DIV class="image"><IMG alt="haar.png" src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/haar.png"> 
<DIV class="caption">image</DIV></DIV>
<P> For this, we apply each and every feature on all the training images. For 
each feature, it finds the best threshold which will classify the faces to 
positive and negative. Obviously, there will be errors or misclassifications. We 
select the features with minimum error rate, which means they are the features 
that most accurately classify the face and non-face images. (The process is not 
as simple as this. Each image is given an equal weight in the beginning. After 
each classification, weights of misclassified images are increased. Then the 
same process is done. New error rates are calculated. Also new weights. The 
process is continued until the required accuracy or error rate is achieved or 
the required number of features are found).</P>
<P>The final classifier is a weighted sum of these weak classifiers. It is 
called weak because it alone can't classify the image, but together with others 
forms a strong classifier. The paper says even 200 features provide detection 
with 95% accuracy. Their final setup had around 6000 features. (Imagine a 
reduction from 160000+ features to 6000 features. That is a big gain).</P>
<P>So now you take an image. Take each 24x24 window. Apply 6000 features to it. 
Check if it is face or not. Wow.. Isn't it a little inefficient and time 
consuming? Yes, it is. The authors have a good solution for that.</P>
<P>In an image, most of the image is non-face region. So it is a better idea to 
have a simple method to check if a window is not a face region. If it is not, 
discard it in a single shot, and don't process it again. Instead, focus on 
regions where there can be a face. This way, we spend more time checking 
possible face regions.</P>
<P>For this they introduced the concept of <B>Cascade of Classifiers</B>. 
Instead of applying all 6000 features on a window, the features are grouped into 
different stages of classifiers and applied one-by-one. (Normally the first few 
stages will contain very many fewer features). If a window fails the first 
stage, discard it. We don't consider the remaining features on it. If it passes, 
apply the second stage of features and continue the process. The window which 
passes all stages is a face region. How is that plan!</P>
<P>The authors' detector had 6000+ features with 38 stages with 1, 10, 25, 25 
and 50 features in the first five stages. (The two features in the above image 
are actually obtained as the best two features from Adaboost). According to the 
authors, on average 10 features out of 6000+ are evaluated per sub-window.</P>
<P>So this is a simple intuitive explanation of how Viola-Jones face detection 
works. Read the paper for more details or check out the references in the 
Additional Resources section.</P>
<H2>Haar-cascade Detection in OpenCV </H2>
<P>OpenCV comes with a trainer as well as detector. If you want to train your 
own classifier for any object like car, planes etc. you can use OpenCV to create 
one. Its full details are given here: <A class="el" href="https://docs.opencv.org/master/dc/d88/tutorial_traincascade.html">Cascade 
Classifier Training</A>.</P>
<P>Here we will deal with detection. OpenCV already contains many pre-trained 
classifiers for face, eyes, smiles, etc. Those XML files are stored in the 
opencv/data/haarcascades/ folder. Let's create a face and eye detector with 
OpenCV.</P>
<P>First we need to load the required XML classifiers. Then load our input image 
(or video) in grayscale mode. </P>
<DIV class="fragment"><DIV class="line"><SPAN class="keyword">import</SPAN> numpy <SPAN class="keyword">as</SPAN> np</DIV><DIV class="line"><SPAN class="keyword">import</SPAN> cv2 <SPAN class="keyword">as</SPAN> cv</DIV><DIV class="line"></DIV><DIV class="line">face_cascade = <A class="code" href="https://docs.opencv.org/master/d1/de5/classcv_1_1CascadeClassifier.html">cv.CascadeClassifier</A>(<SPAN class="stringliteral">'haarcascade_frontalface_default.xml'</SPAN>)</DIV><DIV class="line">eye_cascade = <A class="code" href="https://docs.opencv.org/master/d1/de5/classcv_1_1CascadeClassifier.html">cv.CascadeClassifier</A>(<SPAN class="stringliteral">'haarcascade_eye.xml'</SPAN>)</DIV><DIV class="line"></DIV><DIV class="line">img = <A class="code" href="https://docs.opencv.org/master/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56">cv.imread</A>(<SPAN class="stringliteral">'sachin.jpg'</SPAN>)</DIV><DIV class="line">gray = <A class="code" href="https://docs.opencv.org/master/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab">cv.cvtColor</A>(img, cv.COLOR_BGR2GRAY)</DIV></DIV><!-- fragment -->
<P> Now we find the faces in the image. If faces are found, it returns the 
positions of detected faces as Rect(x,y,w,h). Once we get these locations, we 
can create a ROI for the face and apply eye detection on this ROI (since eyes 
are always on the face !!! ). </P>
<DIV class="fragment"><DIV class="line">faces = face_cascade.detectMultiScale(gray, 1.3, 5)</DIV><DIV class="line"><SPAN class="keywordflow">for</SPAN> (x,y,w,h) <SPAN class="keywordflow">in</SPAN> faces:</DIV><DIV class="line">    <A class="code" href="https://docs.opencv.org/master/d6/d6e/group__imgproc__draw.html#gac865734d137287c0afb7682ff7b3db23">cv.rectangle</A>(img,(x,y),(x+w,y+h),(255,0,0),2)</DIV><DIV class="line">    roi_gray = gray[y:y+h, x:x+w]</DIV><DIV class="line">    roi_color = img[y:y+h, x:x+w]</DIV><DIV class="line">    eyes = eye_cascade.detectMultiScale(roi_gray)</DIV><DIV class="line">    <SPAN class="keywordflow">for</SPAN> (ex,ey,ew,eh) <SPAN class="keywordflow">in</SPAN> eyes:</DIV><DIV class="line">        <A class="code" href="https://docs.opencv.org/master/d6/d6e/group__imgproc__draw.html#gac865734d137287c0afb7682ff7b3db23">cv.rectangle</A>(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)</DIV><DIV class="line"></DIV><DIV class="line"><A class="code" href="https://docs.opencv.org/master/df/d24/group__highgui__opengl.html#gaae7e90aa3415c68dba22a5ff2cefc25d">cv.imshow</A>(<SPAN class="stringliteral">'img'</SPAN>,img)</DIV><DIV class="line"><A class="code" href="https://docs.opencv.org/master/d7/dfc/group__highgui.html#ga5628525ad33f52eab17feebcfba38bd7">cv.waitKey</A>(0)</DIV><DIV class="line"><A class="code" href="https://docs.opencv.org/master/d7/dfc/group__highgui.html#ga6b7fc1c1a8960438156912027b38f481">cv.destroyAllWindows</A>()</DIV></DIV><!-- fragment -->
<P> Result looks like below:</P>
<DIV class="image"><IMG alt="face.jpg" src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/face.jpg"> 
<DIV class="caption">image</DIV></DIV>
<H2>Additional Resources </H2>
<OL type="1">
  <LI>Video Lecture on <A 
  href="https://www.youtube.com/watch?v=WfdYYNamHZ8">Face Detection and 
  Tracking</A></LI>
  <LI>An interesting interview regarding Face Detection by <A href="https://web.archive.org/web/20171204220159/http://www.makematics.com/research/viola-jones/">Adam 
  Harvey</A></LI></OL>
<H2>Exercises </H2></DIV></DIV><!-- contents --> <!-- HTML footer for doxygen 1.8.6--> <!-- start footer part --> 
<HR class="footer">

<ADDRESS class="footer"><SMALL>Generated on Thu Dec 27 2018 06:39:18 for OpenCV 
by &nbsp;<A href="http://www.doxygen.org/index.html"><IMG class="footer" alt="doxygen" 
src="OpenCV%20Face%20Detection%20using%20Haar%20Cascades_files/doxygen.png"> 
</A> 1.8.12 </SMALL></ADDRESS>
<SCRIPT type="text/javascript">
//<![CDATA[
addTutorialsButtons();
//]]>
</SCRIPT>
 </BODY></HTML>
